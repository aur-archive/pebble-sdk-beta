--- waflib/extras/process_resources.py	2015-03-25 21:44:34.652032179 +0300
+++ waflib/extras/process_resources.py.new	2015-03-25 21:44:31.991982054 +0300
@@ -24,7 +24,7 @@
 	character_regex='--filter "%s"'%entry['characterRegex'].encode('utf8')if has_regex else''
 	character_list='--list "%s"'%entry['characterList']if'characterList'in entry else''
 	legacy='--legacy'if entry.get('compatibility')=="2.7"else''
-	cmd="python '{}' pfo {} {} {} {} {} {} '{}' '{}'".format(script,extended,height,tracking_adjust,character_regex,character_list,legacy,ttf,pfo)
+	cmd="'{}' '{}' pfo {} {} {} {} {} {} '{}' '{}'".format(sys.executable, script,extended,height,tracking_adjust,character_regex,character_list,legacy,ttf,pfo)
 	return cmd
 def find_most_specific_filename(bld,root_node,general_filename):
 	suffixes=[BLACK_WHITE_FILENAME_SUFFIX,COLOR_FILENAME_SUFFIX]
@@ -109,17 +109,17 @@
 			output_node=output_base_node.make_node(components[0]+'.'+str(output_type))
 			append_entry((output_node,def_name))
 			if output_type=="png":
-				bld(rule="python '{}' '{}' '{}'".format(png_script.abspath(),input_node.abspath(),output_node.abspath()),source=input_node,target=output_node)
+				bld(rule="'{}' '{}' '{}' '{}'".format(sys.executable,png_script.abspath(),input_node.abspath(),output_node.abspath()),source=input_node,target=output_node)
 			else:
-				bld(rule="python '{}' pbi '{}' '{}' '{}'".format(bitmap_script.abspath(),format,input_node.abspath(),output_node.abspath()),source=[input_node,bitmap_script],target=output_node)
+				bld(rule="'{}' '{}' pbi '{}' '{}' '{}'".format(sys.executable,bitmap_script.abspath(),format,input_node.abspath(),output_node.abspath()),source=[input_node,bitmap_script],target=output_node)
 		elif res_type=="png-trans":
 			color_tag="white"if"WHITE"in def_name else"black"
 			output_pbi=output_base_node.make_node(input_file+'.'+color_tag+'.pbi')
 			append_entry((output_pbi,def_name))
 			if"WHITE"in def_name:
-				bld(rule="python '{}' white_trans_pbi '{}' '{}'".format(bitmap_script.abspath(),input_node.abspath(),output_pbi.abspath()),source=[input_node,bitmap_script],target=output_pbi)
+				bld(rule="'{}' '{}' white_trans_pbi '{}' '{}'".format(sys.executable,bitmap_script.abspath(),input_node.abspath(),output_pbi.abspath()),source=[input_node,bitmap_script],target=output_pbi)
 			elif"BLACK"in def_name:
-				bld(rule="python '{}' black_trans_pbi '{}' '{}'".format(bitmap_script.abspath(),input_node.abspath(),output_pbi.abspath()),source=[input_node,bitmap_script],target=output_pbi)
+				bld(rule="'{}' '{}' black_trans_pbi '{}' '{}'".format(sys.executable,bitmap_script.abspath(),input_node.abspath(),output_pbi.abspath()),source=[input_node,bitmap_script],target=output_pbi)
 			else:
 				raise Exception("png-trans with neither white or black in the name: "+def_name)
 		elif res_type=="svg":
@@ -162,10 +162,10 @@
 	md_script=tools_path.find_node('pbpack_meta_data.py')
 	resource_code_script=tools_path.find_node('generate_resource_code.py')
 	data_sources=[]
-	table_string="python '{}' table '{}'".format(md_script.abspath(),table_node.abspath())
-	manifest_string="python '{}' manifest '{}' '{}'".format(md_script.abspath(),manifest_node.abspath(),timestamp)
-	content_string="python '{}' content '{}'".format(md_script.abspath(),data_node.abspath())
-	resource_ids_header_string="python '{script}' resource_id_header ""'{output_header}'  '{resource_include}' ".format(script=resource_code_script.abspath(),output_header=output_id_header_node.abspath(),resource_include=resource_header_path)
+	table_string="'{}' '{}' table '{}'".format(sys.executable,md_script.abspath(),table_node.abspath())
+	manifest_string="'{}' '{}' manifest '{}' '{}'".format(sys.executable,md_script.abspath(),manifest_node.abspath(),timestamp)
+	content_string="'{}' '{}' content '{}'".format(sys.executable,md_script.abspath(),data_node.abspath())
+	resource_ids_header_string="'{}' '{script}' resource_id_header ""'{output_header}'  '{resource_include}' ".format(sys.executable,script=resource_code_script.abspath(),output_header=output_id_header_node.abspath(),resource_include=resource_header_path)
 	for entry in pack_entries:
 		data_sources.append(entry[0])
 		table_string+=' "%s" '%entry[0].abspath()
@@ -196,21 +196,21 @@
 	fw_build_dir=bld.path.get_bld().make_node('../src/fw')
 	id_header_path=output_id_header_node.path_from(fw_build_dir)
 	if is_system:
-		resource_version_header_string="python '{script}' resource_version_header ""{version_def_name} '{output_header}' {timestamp} ""'{resource_include}' '{data_file}'".format(script=resource_code_script.abspath(),output_header=output_version_header_node.abspath(),version_def_name='SYSTEM_RESOURCE_VERSION',timestamp=timestamp,resource_include=resource_header_path,data_file=data_node.abspath())
+		resource_version_header_string="'{}' '{script}' resource_version_header ""{version_def_name} '{output_header}' {timestamp} ""'{resource_include}' '{data_file}'".format(sys.executable,script=resource_code_script.abspath(),output_header=output_version_header_node.abspath(),version_def_name='SYSTEM_RESOURCE_VERSION',timestamp=timestamp,resource_include=resource_header_path,data_file=data_node.abspath())
 		bld(rule=resource_version_header_string,source=[resource_code_script,data_node],target=output_version_header_node)
 	if font_key_header_node and font_key_table_node and font_key_include_path:
 		key_list_string=" ".join(font_keys)
-		bld(rule="python '{script}' font_key_header '{font_key_header}' ""{key_list}".format(script=resource_code_script.abspath(),font_key_header=font_key_header_node.abspath(),key_list=key_list_string),source=[resource_code_script]+resource_definition_sources,target=font_key_header_node)
-		bld(rule="python '{script}' font_key_table '{font_key_table}' "" '{resource_id_header}' '{font_key_header}' {key_list}".format(script=resource_code_script.abspath(),font_key_table=font_key_table_node.abspath(),resource_id_header=id_header_path,font_key_header=font_key_include_path,key_list=key_list_string),source=[resource_code_script]+resource_definition_sources,target=font_key_table_node)
+		bld(rule="'{}' '{script}' font_key_header '{font_key_header}' ""{key_list}".format(sys.executable,script=resource_code_script.abspath(),font_key_header=font_key_header_node.abspath(),key_list=key_list_string),source=[resource_code_script]+resource_definition_sources,target=font_key_header_node)
+		bld(rule="'{}' '{script}' font_key_table '{font_key_table}' "" '{resource_id_header}' '{font_key_header}' {key_list}".format(sys.executable,script=resource_code_script.abspath(),font_key_table=font_key_table_node.abspath(),resource_id_header=id_header_path,font_key_header=font_key_include_path,key_list=key_list_string),source=[resource_code_script]+resource_definition_sources,target=font_key_table_node)
 	if pfs_resources_header_node:
 		pfs_resources_string=''
 		for(first_name,last_name,filename,id_offset)in pfs_files:
 			pfs_resources_string+="%s %s %s %s "%(first_name,last_name,filename,id_offset)
-		bld(rule="python '{script}' pfs_files_header '{header}' ""'{resource_id_header}' {pfs_resources_string}".format(script=resource_code_script.abspath(),header=pfs_resources_header_node.abspath(),resource_id_header=id_header_path,pfs_resources_string=pfs_resources_string),target=pfs_resources_header_node)
+		bld(rule="'{}' '{script}' pfs_files_header '{header}' ""'{resource_id_header}' {pfs_resources_string}".format(sys.executable,script=resource_code_script.abspath(),header=pfs_resources_header_node.abspath(),resource_id_header=id_header_path,pfs_resources_string=pfs_resources_string),target=pfs_resources_header_node)
 	if builtin_resources_node and builtin_data_sources:
 		inputs_string=''
 		for(builtin_data_node,def_name)in builtin_entries:
 			inputs_string+="%s %s "%(builtin_data_node.abspath(),def_name)
-		rule="python '{script}' builtin_resources ""'{output_path}' '{id_header_path}' {inputs_string}"
-		rule=rule.format(script=resource_code_script.abspath(),output_path=builtin_resources_node.abspath(),id_header_path=id_header_path,inputs_string=inputs_string)
+		rule="'{}' '{script}' builtin_resources ""'{output_path}' '{id_header_path}' {inputs_string}"
+		rule=rule.format(sys.executable,script=resource_code_script.abspath(),output_path=builtin_resources_node.abspath(),id_header_path=id_header_path,inputs_string=inputs_string)
 		bld(rule=rule,source=builtin_data_sources+[resource_code_script],target=builtin_resources_node)
